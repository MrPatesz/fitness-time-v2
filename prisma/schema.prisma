// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// TODO modify User model
model User {
  id                 String    @id @default(cuid())
  name               String?
  email              String?   @unique
  emailVerified      DateTime?
  image              String?
  accounts           Account[]
  sessions           Session[]
  // TODO maybe need defaults for all custom fields
  // locationId         Int?
  // location           Location? @relation(fields: [locationId], references: [id], onDelete: Restrict)
  introduction       String?
  createdEvents      Event[]   @relation(name: "createdEvents")
  participatedEvents Event[]   @relation(name: "participatedEvents")
  // createdGroups      Group[]   @relation(name: "createdGroups")
  // joinedGroups       Group[]   @relation(name: "joinedGroups")
}

model Event {
  id           Int      @id @default(autoincrement())
  name         String
  start        DateTime
  end          DateTime
  // locationId   Int
  // location     Location @relation(fields: [locationId], references: [id], onDelete: Restrict)
  // recurring    Boolean
  description  String?
  equipment    String?
  limit        Int?
  price        Int?
  creatorId    String
  creator      User     @relation(name: "createdEvents", fields: [creatorId], references: [id], onDelete: Restrict)
  participants User[]   @relation(name: "participatedEvents")
}

// model Location {
//   id        Int     @id @default(autoincrement())
//   address   String  @unique
//   latitude  Float
//   longitude Float
//   users     User[]
//   events    Event[]
// }
//
// model Group {
//   id        Int    @id @default(autoincrement())
//   name      String @unique
//   creatorId String
//   creator   User   @relation(name: "createdGroups", fields: [creatorId], references: [id], onDelete: Restrict)
//   members   User[] @relation(name: "joinedGroups")
//   // events Event[]
//   // posts Post[]
// }
