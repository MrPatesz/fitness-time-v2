// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["linux-musl-openssl-3.0.x"]
}

generator kysely {
  provider = "prisma-kysely"
  output   = "../src/server/kysely"
  fileName = "generatedTypes.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                 String        @id @default(cuid())
  name               String        @db.VarChar(64)
  email              String        @unique @db.VarChar(128)
  emailVerified      DateTime?
  image              String        @db.VarChar(256)
  accounts           Account[]
  sessions           Session[]
  introduction       String        @default("") @db.VarChar(1024)
  themeColor         Color         @default(violet)
  locationId         Int?
  location           Location?     @relation(fields: [locationId], references: [id], onDelete: Restrict)
  createdEvents      Event[]       @relation(name: "createdEvents")
  participatedEvents Event[]       @relation(name: "participatedEvents")
  comments           Comment[]
  messages           Message[]
  ratings            Rating[]
  createdGroups      Group[]       @relation(name: "createdGroups")
  joinedGroups       Group[]       @relation(name: "joinedGroups")
  joinRequests       JoinRequest[]
}

model Event {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @unique @default(now())
  updatedAt    DateTime  @updatedAt
  name         String    @db.VarChar(64)
  start        DateTime
  end          DateTime
  description  String    @db.VarChar(1024)
  images       String[]  @default([]) @db.VarChar(256)
  limit        Int?
  price        Int?
  locationId   Int
  location     Location  @relation(fields: [locationId], references: [id], onDelete: Restrict)
  creatorId    String
  creator      User      @relation(name: "createdEvents", fields: [creatorId], references: [id], onDelete: Cascade)
  participants User[]    @relation(name: "participatedEvents")
  comments     Comment[]
  ratings      Rating[]
  groupId      Int?
  group        Group?    @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model Location {
  id        Int     @id @default(autoincrement())
  address   String  @unique
  latitude  Float
  longitude Float
  users     User[]
  events    Event[]
}

model Comment {
  id       Int      @id @default(autoincrement())
  text     String   @db.VarChar(512)
  postedAt DateTime @default(now())
  userId   String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventId  Int
  event    Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Group {
  id           Int           @id @default(autoincrement())
  name         String        @unique @db.VarChar(64)
  description  String        @db.VarChar(1024)
  isPrivate    Boolean
  color1       Color
  color2       Color
  createdAt    DateTime      @default(now())
  creatorId    String
  creator      User          @relation(name: "createdGroups", fields: [creatorId], references: [id], onDelete: Cascade)
  members      User[]        @relation(name: "joinedGroups")
  messages     Message[]
  events       Event[]
  joinRequests JoinRequest[]
}

model Message {
  id       Int      @id @default(autoincrement())
  text     String   @db.VarChar(512)
  postedAt DateTime @unique @default(now())
  userId   String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  groupId  Int
  group    Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model Rating {
  id      Int    @id @default(autoincrement())
  stars   Float
  eventId Int
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model JoinRequest {
  createdAt DateTime @default(now())
  groupId   Int
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
}

enum Color {
  red
  pink
  grape
  violet
  indigo
  blue
  cyan
  teal
  green
  lime
  yellow
  orange
}
